#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö location ID –¥–ª—è Immowelt
"""

import asyncio
import sys
import os

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from real_api_system import RealEstateAPI

async def test_immowelt_locations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ location ID –¥–ª—è Immowelt"""
    
    # Initialize the API system
    api = RealEstateAPI()
    
    # Test different location approaches for Hamburg
    test_urls = [
        # 1. Direct city name
        "https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=Hamburg",
        
        # 2. URL encoded city name
        "https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=Hamburg",
        
        # 3. Different location ID (try some common ones)
        "https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=AD08DE6748",  # Current (Kolbermoor)
        
        # 4. Try without location parameter
        "https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment",
        
        # 5. Try with different location ID format
        "https://www.immowelt.de/classified-search?distributionTypes=Rent&estateTypes=Apartment&locations=Hamburg%2C%20Deutschland",
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ URL –¥–ª—è Immowelt Hamburg...")
    
    for i, url in enumerate(test_urls, 1):
        print(f"\n--- –¢–µ—Å—Ç {i}: {url} ---")
        
        try:
            # Test with Apify
            actor_id = "azzouzana~immowelt-de-search-results-scraper-by-search-url"
            test_payload = {
                "startUrl": url,
                "maxPagesToScrape": 1,
                "enableDeltaMode": False
            }
            
            items = await api._start_apify_run_sync_get_items(actor_id, test_payload, source_name='immowelt')
            
            if items:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(items)} –∫–≤–∞—Ä—Ç–∏—Ä")
                
                # Check cities in results
                cities = set()
                for item in items[:3]:  # Check first 3 items
                    if 'location' in item and 'address' in item['location']:
                        city = item['location']['address'].get('city', 'Unknown')
                        cities.add(city)
                        print(f"  - –ì–æ—Ä–æ–¥: {city}")
                
                print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {list(cities)}")
                
                # Check if any Hamburg apartments
                hamburg_found = any('hamburg' in city.lower() for city in cities)
                if hamburg_found:
                    print("  üéâ –ù–ê–ô–î–ï–ù–´ –ö–í–ê–†–¢–ò–†–´ –í HAMBURG!")
                else:
                    print("  ‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ Hamburg –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_immowelt_locations())
