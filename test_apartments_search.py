#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
"""

import asyncio
import logging
from config import Config
from mongodb_manager import mongodb
from real_api_system import RealEstateAPI

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_apartment_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä"""
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        if not await mongodb.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        test_filters = {
            "city": "Berlin",
            "price_min": 500,
            "price_max": 1500,
            "rooms_min": 1,
            "rooms_max": 3
        }
        
        print(f"üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {test_filters}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RealEstateAPI –¥–ª—è –ø–æ–∏—Å–∫–∞
        async with RealEstateAPI() as api:
            apartments = await api.search_apartments(test_filters)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä!")
            
            if apartments:
                print("\nüìã –ü–µ—Ä–≤—ã–µ 3 –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
                for i, apt in enumerate(apartments[:3], 1):
                    print(f"\n{i}. {apt.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"   üí∞ –¶–µ–Ω–∞: {apt.get('price', 0)}‚Ç¨")
                    print(f"   üè† –ö–æ–º–Ω–∞—Ç—ã: {apt.get('rooms', 0)}")
                    print(f"   üìê –ü–ª–æ—â–∞–¥—å: {apt.get('area', 0)}–º¬≤")
                    print(f"   üìç –ì–æ—Ä–æ–¥: {apt.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    print(f"   üîó URL: {apt.get('original_url', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                saved_count = 0
                for apt in apartments:
                    apt_id = await mongodb.save_apartment(apt)
                    if apt_id:
                        saved_count += 1
                
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∫–≤–∞—Ä—Ç–∏—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                print(f"\nüîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                db_apartments = await mongodb.get_apartments_by_filters(test_filters, limit=5)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(db_apartments)} –∫–≤–∞—Ä—Ç–∏—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                
                if db_apartments:
                    print("\nüìã –ö–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
                    for i, apt in enumerate(db_apartments[:3], 1):
                        print(f"\n{i}. {apt.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        print(f"   üí∞ –¶–µ–Ω–∞: {apt.get('price', 0)}‚Ç¨")
                        print(f"   üè† –ö–æ–º–Ω–∞—Ç—ã: {apt.get('rooms', 0)}")
                        print(f"   üìê –ü–ª–æ—â–∞–¥—å: {apt.get('area', 0)}–º¬≤")
                        print(f"   üìç –ì–æ—Ä–æ–¥: {apt.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                        print(f"   üîó URL: {apt.get('original_url', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}")
            else:
                print("‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        
        await mongodb.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä: {e}")
        logger.error(f"Error in apartment search: {e}")
        return False

async def test_direct_scrapers():
    """–¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö —Å–∫—Ä–∞–ø–µ—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å–∫—Ä–∞–ø–µ—Ä–æ–≤...")
    
    try:
        from scrapers import ScraperManager
        
        test_filters = {
            "city": "Berlin",
            "price_min": 500,
            "price_max": 1500,
            "rooms_min": 1,
            "rooms_max": 3
        }
        
        async with ScraperManager() as sm:
            apartments = await sm.search_all_sites(test_filters)
            
            print(f"‚úÖ –ü—Ä—è–º—ã–µ —Å–∫—Ä–∞–ø–µ—Ä—ã –Ω–∞—à–ª–∏ {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä!")
            
            if apartments:
                print("\nüìã –ü–µ—Ä–≤—ã–µ 2 –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç –ø—Ä—è–º—ã—Ö —Å–∫—Ä–∞–ø–µ—Ä–æ–≤:")
                for i, apt in enumerate(apartments[:2], 1):
                    print(f"\n{i}. {apt.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"   üí∞ –¶–µ–Ω–∞: {apt.get('price', 0)}‚Ç¨")
                    print(f"   üè† –ö–æ–º–Ω–∞—Ç—ã: {apt.get('rooms', 0)}")
                    print(f"   üìê –ü–ª–æ—â–∞–¥—å: {apt.get('area', 0)}–º¬≤")
                    print(f"   üìç –ì–æ—Ä–æ–¥: {apt.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    print(f"   üîó URL: {apt.get('original_url', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}")
            
            return len(apartments) > 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä—è–º—ã—Ö —Å–∫—Ä–∞–ø–µ—Ä–æ–≤: {e}")
        logger.error(f"Error in direct scrapers test: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏")
    print("=" * 70)
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä —á–µ—Ä–µ–∑ API
    api_search_ok = await test_apartment_search()
    
    # –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö —Å–∫—Ä–∞–ø–µ—Ä–æ–≤
    scrapers_ok = await test_direct_scrapers()
    
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–ò–°–ö–ê:")
    print(f"API –ø–æ–∏—Å–∫: {'‚úÖ OK' if api_search_ok else '‚ùå FAIL'}")
    print(f"–ü—Ä—è–º—ã–µ —Å–∫—Ä–∞–ø–µ—Ä—ã: {'‚úÖ OK' if scrapers_ok else '‚ùå FAIL'}")
    
    if api_search_ok or scrapers_ok:
        print("\nüéâ –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python run.py")
    else:
        print("\n‚ö†Ô∏è –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main())
